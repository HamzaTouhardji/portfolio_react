{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _mdlUpgrade = require('./utils/mdlUpgrade');\n\nvar _mdlUpgrade2 = _interopRequireDefault(_mdlUpgrade);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  className: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  error: _propTypes2.default.node,\n  expandable: _propTypes2.default.bool,\n  expandableIcon: _propTypes2.default.string,\n  floatingLabel: _propTypes2.default.bool,\n  id: function id(props, propName, componentName) {\n    var id = props.id;\n\n    if (id && typeof id !== 'string') {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`. `' + propName + '` should be a string. Validation failed.');\n    }\n\n    if (!id && typeof props.label !== 'string') {\n      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`. `' + propName + '` is required when label is an element. Validation failed.');\n    }\n\n    return null;\n  },\n  inputClassName: _propTypes2.default.string,\n  label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]).isRequired,\n  maxRows: _propTypes2.default.number,\n  onChange: _propTypes2.default.func,\n  pattern: _propTypes2.default.string,\n  required: _propTypes2.default.bool,\n  rows: _propTypes2.default.number,\n  style: _propTypes2.default.object,\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])\n};\n\nvar Textfield = function (_React$Component) {\n  _inherits(Textfield, _React$Component);\n\n  function Textfield() {\n    _classCallCheck(this, Textfield);\n\n    return _possibleConstructorReturn(this, (Textfield.__proto__ || Object.getPrototypeOf(Textfield)).apply(this, arguments));\n  }\n\n  _createClass(Textfield, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.error && !this.props.pattern) {\n        this.setAsInvalid();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.required !== prevProps.required || this.props.pattern !== prevProps.pattern || this.props.error !== prevProps.error) {\n        (0, _reactDom.findDOMNode)(this).MaterialTextfield.checkValidity();\n      }\n\n      if (this.props.disabled !== prevProps.disabled) {\n        (0, _reactDom.findDOMNode)(this).MaterialTextfield.checkDisabled();\n      }\n\n      if (this.props.value !== prevProps.value && this.inputRef !== document.activeElement) {\n        (0, _reactDom.findDOMNode)(this).MaterialTextfield.change(this.props.value);\n      }\n\n      if (this.props.error && !this.props.pattern) {\n        // Every time the input gets updated by MDL (checkValidity() or change())\n        // its invalid class gets reset. We have to put it again if the input is specifically set as \"invalid\"\n        this.setAsInvalid();\n      }\n    }\n  }, {\n    key: 'setAsInvalid',\n    value: function setAsInvalid() {\n      var elt = (0, _reactDom.findDOMNode)(this);\n\n      if (elt.className.indexOf('is-invalid') < 0) {\n        elt.className = (0, _classnames2.default)(elt.className, 'is-invalid');\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          inputClassName = _props.inputClassName,\n          id = _props.id,\n          error = _props.error,\n          expandable = _props.expandable,\n          expandableIcon = _props.expandableIcon,\n          floatingLabel = _props.floatingLabel,\n          label = _props.label,\n          maxRows = _props.maxRows,\n          rows = _props.rows,\n          style = _props.style,\n          children = _props.children,\n          otherProps = _objectWithoutProperties(_props, ['className', 'inputClassName', 'id', 'error', 'expandable', 'expandableIcon', 'floatingLabel', 'label', 'maxRows', 'rows', 'style', 'children']);\n\n      var hasRows = !!rows;\n      var customId = id || 'textfield-' + label.replace(/[^a-z0-9]/gi, '');\n      var inputTag = hasRows || maxRows > 1 ? 'textarea' : 'input';\n\n      var inputProps = _extends({\n        className: (0, _classnames2.default)('mdl-textfield__input', inputClassName),\n        id: customId,\n        rows: rows,\n        ref: function ref(c) {\n          return _this2.inputRef = c;\n        }\n      }, otherProps);\n\n      var input = _react2.default.createElement(inputTag, inputProps);\n\n      var labelContainer = _react2.default.createElement('label', {\n        className: 'mdl-textfield__label',\n        htmlFor: customId\n      }, label);\n\n      var errorContainer = !!error && _react2.default.createElement('span', {\n        className: 'mdl-textfield__error'\n      }, error);\n\n      var containerClasses = (0, _classnames2.default)('mdl-textfield mdl-js-textfield', {\n        'mdl-textfield--floating-label': floatingLabel,\n        'mdl-textfield--expandable': expandable\n      }, className);\n      return expandable ? _react2.default.createElement('div', {\n        className: containerClasses,\n        style: style\n      }, _react2.default.createElement('label', {\n        className: 'mdl-button mdl-js-button mdl-button--icon',\n        htmlFor: customId\n      }, _react2.default.createElement('i', {\n        className: 'material-icons'\n      }, expandableIcon)), _react2.default.createElement('div', {\n        className: 'mdl-textfield__expandable-holder'\n      }, input, labelContainer, errorContainer), children) : _react2.default.createElement('div', {\n        className: containerClasses,\n        style: style\n      }, input, labelContainer, errorContainer, children);\n    }\n  }]);\n\n  return Textfield;\n}(_react2.default.Component);\n\nTextfield.propTypes = propTypes;\nexports.default = (0, _mdlUpgrade2.default)(Textfield);","map":null,"metadata":{},"sourceType":"script"}