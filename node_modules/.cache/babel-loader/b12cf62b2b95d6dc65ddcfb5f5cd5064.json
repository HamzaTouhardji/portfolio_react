{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _lodash = require('lodash.isequal');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _TableHeader = require('./TableHeader');\n\nvar _TableHeader2 = _interopRequireDefault(_TableHeader);\n\nvar _Checkbox = require('../Checkbox');\n\nvar _Checkbox2 = _interopRequireDefault(_Checkbox);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  columns: function columns(props, propName, componentName) {\n    return props[propName] && new Error(componentName + ': `' + propName + '` is deprecated, please use the component `TableHeader` instead.');\n  },\n  data: function data(props, propName, componentName) {\n    return props[propName] && new Error(componentName + ': `' + propName + '` is deprecated, please use `rows` instead. `' + propName + '` will be removed in the next major release.');\n  },\n  onSelectionChanged: _propTypes2.default.func,\n  rowKeyColumn: _propTypes2.default.string,\n  rows: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,\n  selectable: _propTypes2.default.bool,\n  selectedRows: _propTypes2.default.array\n};\nvar defaultProps = {\n  onSelectionChanged: function onSelectionChanged() {// do nothing\n  }\n};\n\nexports.default = function (Component) {\n  var Selectable = function (_React$Component) {\n    _inherits(Selectable, _React$Component);\n\n    function Selectable(props) {\n      _classCallCheck(this, Selectable);\n\n      var _this = _possibleConstructorReturn(this, (Selectable.__proto__ || Object.getPrototypeOf(Selectable)).call(this, props));\n\n      _this.handleChangeHeaderCheckbox = _this.handleChangeHeaderCheckbox.bind(_this);\n      _this.handleChangeRowCheckbox = _this.handleChangeRowCheckbox.bind(_this);\n      _this.builRowCheckbox = _this.builRowCheckbox.bind(_this);\n\n      if (props.selectable) {\n        _this.state = {\n          headerSelected: false,\n          selectedRows: props.selectedRows || []\n        };\n      }\n\n      return _this;\n    }\n\n    _createClass(Selectable, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (nextProps.selectable) {\n          var rows = nextProps.rows,\n              data = nextProps.data,\n              rowKeyColumn = nextProps.rowKeyColumn;\n          var rrows = rows || data;\n\n          if (!(0, _lodash2.default)(this.props.rows || this.props.data, rrows) || !(0, _lodash2.default)(this.props.selectedRows, nextProps.selectedRows)) {\n            // keep only existing rows\n            var selectedRows = (nextProps.selectedRows || this.state.selectedRows).filter(function (k) {\n              return rrows.map(function (row, i) {\n                return row[rowKeyColumn] || row.key || i;\n              }).indexOf(k) > -1;\n            });\n            this.setState({\n              headerSelected: selectedRows.length === rrows.length,\n              selectedRows: selectedRows\n            });\n\n            if (!nextProps.selectedRows) {\n              nextProps.onSelectionChanged(selectedRows);\n            }\n          }\n        }\n      }\n    }, {\n      key: 'handleChangeHeaderCheckbox',\n      value: function handleChangeHeaderCheckbox(e) {\n        var _props = this.props,\n            rowKeyColumn = _props.rowKeyColumn,\n            rows = _props.rows,\n            data = _props.data;\n        var selected = e.target.checked;\n        var selectedRows = selected ? (rows || data).map(function (row, idx) {\n          return row[rowKeyColumn] || row.key || idx;\n        }) : [];\n        this.setState({\n          headerSelected: selected,\n          selectedRows: selectedRows\n        });\n        this.props.onSelectionChanged(selectedRows);\n      }\n    }, {\n      key: 'handleChangeRowCheckbox',\n      value: function handleChangeRowCheckbox(e) {\n        var _props2 = this.props,\n            rows = _props2.rows,\n            data = _props2.data;\n        var rowId = JSON.parse(e.target.dataset ? e.target.dataset.reactmdl : e.target.getAttribute('data-reactmdl')).id;\n        var rowChecked = e.target.checked;\n        var selectedRows = this.state.selectedRows;\n\n        if (rowChecked) {\n          selectedRows.push(rowId);\n        } else {\n          var idx = selectedRows.indexOf(rowId);\n          selectedRows.splice(idx, 1);\n        }\n\n        this.setState({\n          headerSelected: (rows || data).length === selectedRows.length,\n          selectedRows: selectedRows\n        });\n        this.props.onSelectionChanged(selectedRows);\n      }\n    }, {\n      key: 'builRowCheckbox',\n      value: function builRowCheckbox(content, row, idx) {\n        var rowKey = row[this.props.rowKeyColumn] || row.key || idx;\n        var isSelected = this.state.selectedRows.indexOf(rowKey) > -1;\n        return _react2.default.createElement(_Checkbox2.default, {\n          className: 'mdl-data-table__select',\n          'data-reactmdl': JSON.stringify({\n            id: rowKey\n          }),\n          checked: isSelected,\n          onChange: this.handleChangeRowCheckbox\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props3 = this.props,\n            rows = _props3.rows,\n            data = _props3.data,\n            selectable = _props3.selectable,\n            children = _props3.children,\n            rowKeyColumn = _props3.rowKeyColumn,\n            otherProps = _objectWithoutProperties(_props3, ['rows', 'data', 'selectable', 'children', 'rowKeyColumn']); // remove unwatned props\n        // see https://github.com/Hacker0x01/react-datepicker/issues/517#issuecomment-230171426\n\n\n        delete otherProps.onSelectionChanged;\n        delete otherProps.selectedRows;\n        var realRows = selectable ? (rows || data).map(function (row, idx) {\n          var rowKey = row[rowKeyColumn] || row.key || idx;\n          return _extends({}, row, {\n            className: (0, _classnames2.default)({\n              'is-selected': _this2.state.selectedRows.indexOf(rowKey) > -1\n            }, row.className)\n          });\n        }) : rows || data;\n        return _react2.default.createElement(Component, _extends({\n          rows: realRows\n        }, otherProps), selectable && _react2.default.createElement(_TableHeader2.default, {\n          name: 'mdl-header-select',\n          cellFormatter: this.builRowCheckbox\n        }, _react2.default.createElement(_Checkbox2.default, {\n          className: 'mdl-data-table__select',\n          checked: this.state.headerSelected,\n          onChange: this.handleChangeHeaderCheckbox\n        })), children);\n      }\n    }]);\n\n    return Selectable;\n  }(_react2.default.Component);\n\n  Selectable.propTypes = propTypes;\n  Selectable.defaultProps = defaultProps;\n  return Selectable;\n};","map":null,"metadata":{},"sourceType":"script"}